{"ast":null,"code":"import _asyncToGenerator from\"D:/projetos/netflix-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/projetos/netflix-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"D:\\\\projetos\\\\netflix-clone\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useState,useEffect}from'react';import axios from\"./axios\";import YouTube from'react-youtube';//import movieTrailer from 'movie-trailer'\nimport\"./Row.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"360\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{if(isLargeRow){setTrailerUrl(\"jprEnT6tS4I\");}else{setTrailerUrl(\"rt-2cxAiPJk\");}//console.log(movie.original_name || movie.original_title);\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["D:/projetos/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","map","poster_path","backdrop_path","name","id"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA;AACA,MAAO,WAAP,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAE,sCAAhB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC1C,cAA4BR,QAAQ,CAAC,EAAD,CAApC,wCAAOS,MAAP,eAAeC,SAAf,eACA,eAAoCV,QAAQ,CAAC,EAAD,CAA5C,yCAAOW,UAAP,eAAmBC,aAAnB,eAEAX,SAAS,CAAC,UAAM,SAEGY,CAAAA,SAFH,qIAEZ,qKAC0BX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEIL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDAFY,4CAOZF,SAAS,GACZ,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHH,CAAb,CAUA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B,GAAIb,UAAJ,CAAgB,CACZC,aAAa,CAAC,EAAD,CAAb,CAEH,CAHD,IAIK,CACD,GAAIJ,UAAJ,CAAe,CACXI,aAAa,CAAC,aAAD,CAAb,CACH,CAFD,IAGK,CACLA,aAAa,CAAC,aAAD,CAAb,CACC,CACD;AAEH,CAEJ,CAhBD,CAkBA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAKN,KAAL,EADJ,cAEI,YAAK,SAAS,CAAC,cAAf,UACKG,MAAM,CAACgB,GAAP,CAAW,SAAAD,KAAK,qBACd,YAEE,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHX,CAIE,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACE,WAAT,CAAuBF,KAAK,CAACG,aAAvD,CAJL,CAKE,GAAG,CAAEH,KAAK,CAACI,IALb,EACOJ,KAAK,CAACK,EADb,CADc,EAAhB,CADL,EAFJ,CAaKlB,UAAU,eAAK,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAbpB,GADJ,CAiBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport YouTube from 'react-youtube'\r\n//import movieTrailer from 'movie-trailer'\r\nimport \"./Row.css\";\r\n\r\nconst base_url= \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n       \r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"360\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n            \r\n        },\r\n    };\r\n    \r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n           \r\n        }\r\n        else {\r\n            if (isLargeRow){\r\n                setTrailerUrl(\"jprEnT6tS4I\");\r\n            }\r\n            else {\r\n            setTrailerUrl(\"rt-2cxAiPJk\");\r\n            }\r\n            //console.log(movie.original_name || movie.original_title);\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie =>  (\r\n                   <img\r\n                     key={movie.id}\r\n                     onClick={() => handleClick(movie)}\r\n                     className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                     src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                     alt={movie.name}\r\n                    />\r\n               ))}\r\n            </div>\r\n            {trailerUrl  && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}